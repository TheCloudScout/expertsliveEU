.create table ux_CL ( connector_host: string, Country: string, host: string, message: string, tags: dynamic, timestamp: datetime, type: string )

.create-or-alter table ux_CL ingestion json mapping 'uxcl_mapping' '[ { "column": "connector_host", "path": "$[\'connector_host\']", "datatype": "", "transform": null }, { "column": "Country", "path": "$[\'Country\']", "datatype": "", "transform": null }, { "column": "host", "path": "$[\'host\']", "datatype": "", "transform": null }, { "column": "message", "path": "$[\'message\']", "datatype": "", "transform": null }, { "column": "tags", "path": "$[\'tags\']", "datatype": "", "transform": null }, { "column": "timestamp", "path": "$[\'timestamp\']", "datatype": "", "transform": null }, { "column": "type", "path": "$[\'type\']", "datatype": "", "transform": null } ]'

.create table bluecoat_CL ( ls_timestamp: datetime, ls_version: string, connector_host: string, Country: string, host: string, message: string, tags: dynamic, type: string )

.create-or-alter table bluecoat_CL ingestion json mapping 'bluecoatcl_mapping' '[ { "column": "ls_timestamp", "path": "$[\'@timestamp\']", "datatype": "", "transform": null }, { "column": "ls_version", "path": "$[\'@version\']", "datatype": "", "transform": null }, { "column": "connector_host", "path": "$[\'connector_host\']", "datatype": "", "transform": null }, { "column": "Country", "path": "$[\'Country\']", "datatype": "", "transform": null }, { "column": "host", "path": "$[\'host\']", "datatype": "", "transform": null }, { "column": "message", "path": "$[\'message\']", "datatype": "", "transform": null }, { "column": "tags", "path": "$[\'tags\']", "datatype": "", "transform": null }, { "column": "type", "path": "$[\'type\']", "datatype": "", "transform": null } ]'

.create table bluecoat_parsed_CL (connector_host:string, Country:string, host:string, ls_timestamp:datetime, ls_version:string, message:string, tags:dynamic, type:string, logTime:datetime, time_taken:long, c_ip:string, dv_userdn:string, dv_auth_groups:string, hostname:string, hostip:string, cs_userdn:string, cs_auth_groups:string, exception_id:string, sc_filter_result:string, cs_categories:dynamic, cs_referrer:string, sc_status:string, s_action:string, cs_method:string, content_type:dynamic, cs_uri_scheme:string, cs_host:string, cs_uri_port:string, cs_uri_path:string, cs_uri_query:string, cs_uri_extension:string, cs_user_agent:string, s_ip:string, sent_bytes:long, received_bytes:long, virus_id:string, app_name:string, app_operation:string, src_port:string, cs_threat_risk:string, sid:string, country:string)

.create-or-alter function bluecoat_CL_parser()
{ 
bluecoat_CL
// Parse 1/3 of 'message'. Seperated due to extract_all() operator limited to 16 regex groups
| extend Parser = extract_all(@'^(\d{4}\-\d{2}-\d{2})\s+(\d{2}\:\d{2}:\d{2})\s+(\d+)\s+(\S+)\s+(\S+)\s+(\S+)\s+(\S+)\s+(\S+)\s+(\S+)\s+(\S+)\s+(\S+)\s+([\S\s]+)',dynamic([1,2,3,4,5,6,7,8,9,10,11,12]), message)
| mv-expand Parser
| extend logTime = todatetime(strcat(tostring(Parser[0]),'T',tostring(Parser[1]))), 
    time_taken = tolong(Parser[2]), 
    c_ip = tostring(Parser[3]), 
    dv_userdn = tostring(Parser[4]),                            // New field compare to Microsoft parser on Github
    dv_auth_groups = replace(@"%20",@'',tostring(Parser[5])),   // New field compare to Microsoft parser on Github
    hostname = tostring(Parser[6]),                             // New field compare to Microsoft parser on Github
    hostip = tostring(Parser[7]),                               // New field compare to Microsoft parser on Github
    cs_userdn = tostring(Parser[8]), 
    cs_auth_groups= replace(@"%20",@'',tostring(Parser[9])), 
    exception_id = tostring(Parser[10]), 
    RemainingString1 = Parser[11]
// Parse 2/3 of 'message'
| extend Parser2 = extract_all(@'^(\S+)\s+\"([\w\s\)\(;\/_-]+)\"\s+(\S+)\s+(\S+)\s+(\S+)\s+(\S+)\s+(\S+)\s+(\S+)\s+(\S+)\s+(\S+)\s+(\S+)\s+(\S+)\s+(\S+)\s+([\S\s]+)',dynamic([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16]), tostring(RemainingString1))
| mv-expand Parser2
| extend sc_filter_result = tostring(Parser2[0]), 
    cs_categories = split(Parser2[1],";"),
    cs_referrer = tostring(Parser2[2]), 
    sc_status = tostring(Parser2[3]), 
    s_action = tostring(Parser2[4]), 
    cs_method= tostring(Parser2[5]), 
    content_type = split(replace(@"%20",@'',tostring(Parser2[6])),";"), 
    cs_uri_scheme = tostring(Parser2[7]), 
    cs_host = tostring(Parser2[8]), 
    cs_uri_port = tostring(Parser2[9]), 
    cs_uri_path = tostring(Parser2[10]), 
    cs_uri_query = tostring(Parser2[11]), 
    cs_uri_extension = tostring(Parser2[12]),
    RemainingString2 = Parser2[13]
// Parse 3/3 of 'message'
| extend Parser3 = extract_all(@'^(\"([\w\s\)\,\.\(\;\:\/\_\-\|\}\{\%\=\+\?\<\>\#\]\[]+)\"|(\S+))\s+(\S+)\s+(\S+)\s+(\d+)\s+(\S+)\s+(\S+)\s+(\S+)\s+(\S+)\s+(\S+)\s+(\S+)\s+(\S+)\s+(\S+)',dynamic([1,2,3,4,5,6,7,8,9,10,12,13,14,15,16]), tostring(RemainingString2))
| mv-expand Parser3
| extend cs_user_agent = tostring(Parser3[1]),
    s_ip = tostring(Parser3[3]), 
    sent_bytes =  tolong(Parser3[4]),
    received_bytes = tolong(Parser3[5]), 
    virus_id = tostring(Parser3[6]),
    app_name = tostring(Parser3[7]), 
    app_operation = tostring(Parser3[8]), 
    src_port = tostring(Parser3[9]), 
    cs_threat_risk = tostring(Parser3[11]),
    sid = tostring(Parser3[10]),                                // New field compare to Microsoft parser on Github
    country = replace(@"%20",@' ',tostring(Parser3[12]))
| project-away Parser, Parser2, Parser3, RemainingString1, RemainingString2 // keep 'message' for when parser might fail
}

.alter table bluecoat_CL_parsed policy update @'[{"Source": "bluecoat_CL", "Query": "bluecoat_CL_parser()", "IsEnabled": "True", "IsTransactional": true}]'

// New Role Groups
.add database ['logstash-archive'] viewers ('aadgroup=4840ce71-9f95-463b-8425-46801eb9d347;AholdDelhaize.com')

.add database ['logstash-archive'] ingestors ('aadgroup=f5f83621-6ee7-4a0f-afeb-19a95dd676b0;AholdDelhaize.com')

.add database ['logstash-archive'] admins ('aadgroup=368aee1a-48f3-4e0f-ad90-e612ed935706;AholdDelhaize.com')